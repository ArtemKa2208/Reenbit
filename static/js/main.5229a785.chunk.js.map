{"version":3,"sources":["api/chats.ts","store/actions.ts","store/selectors.ts","api/message.ts","components/Contacts/Contacts.tsx","components/Search/Search.tsx","components/MessageFromMe/MessageFromMe.tsx","components/MessageToMe/MessageToMe.tsx","components/Messages/Messages.tsx","App.tsx","store/index.ts","index.tsx"],"names":["getChats","a","fetch","response","json","LOAD_CHATS","LOAD_MESSAGES","SET_SEARCH","SET_SELECTED_CHAT_ID","loadMessagesAction","payload","type","getChatsSelector","state","chats","getSelectedChatIdSelector","selectedChatId","getMessagesSelector","messages","getSearchSelector","search","getMessages","getMessageFromChuck","Contacts","dispatch","useDispatch","useSelector","useEffect","responseChats","responseMessages","loadDataFromServer","selectChat","chatId","getLastMessage","id","filteredMessages","filter","message","messagesLength","length","body","dateNow","Date","date","format","filteredChats","chat","name","toLowerCase","includes","className","map","role","aria-hidden","onClick","src","photo","alt","Search","useState","currentInput","setCurrentInput","placeholder","onChange","event","target","value","MessageFromMe","time","MessageToMe","Messages","refScroll","useRef","selectedChat","find","addMessageHandler","newMessage","fullDate","direction","console","log","setTimeout","chuckMessage","current","scrollTo","scrollHeight","ref","onSubmit","preventDefault","action","App","initialState","store","createStore","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5229a785.chunk.js","sourcesContent":["export const getChats = async () => {\n  const response = await fetch('https://my-json-server.typicode.com/ArtemKa2208/Reenbit/chats');\n\n  return response.json();\n};\n","import { Chat, Message } from '../react-app-env.d';\n\nexport const LOAD_CHATS = 'LOAD_CHATS';\nexport const LOAD_MESSAGES = 'LOAD_MESSAGES';\nexport const SET_SEARCH = 'SET_SEARCH';\nexport const SET_SELECTED_CHAT_ID = 'SET_SELECTED_CHAT_ID';\n\nexport const setSelectedChatIdAction = (payload: number) => ({\n  type: SET_SELECTED_CHAT_ID,\n  payload,\n});\n\nexport const loadChatsAction = (payload: Chat[]) => ({\n  type: LOAD_CHATS,\n  payload,\n});\n\nexport const loadMessagesAction = (payload: Message[]) => ({\n  type: LOAD_MESSAGES,\n  payload,\n});\n\nexport const setSearchAction = (payload: string) => ({\n  type: SET_SEARCH,\n  payload,\n});\n","import { State } from '../react-app-env.d';\n\nexport const getChatsSelector = (state: State) => state.chats;\nexport const getSelectedChatIdSelector = (state: State) => state.selectedChatId;\nexport const getMessagesSelector = (state: State) => state.messages;\nexport const getSearchSelector = (state: State) => state.search;\n","import { Message } from '../react-app-env.d';\n\nexport const addMessage = async (message: Message) => {\n  const response = await fetch('https://my-json-server.typicode.com/ArtemKa2208/Reenbit/messages', {\n    method: 'POST',\n    body: JSON.stringify(message),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n\nexport const getMessages = async () => {\n  const response = await fetch('https://my-json-server.typicode.com/ArtemKa2208/Reenbit/messages');\n\n  return response.json();\n};\n\nexport const getMessageFromChuck = async () => {\n  const response = await fetch('https://api.chucknorris.io/jokes/random');\n\n  return response.json();\n};\n","import React, { useEffect } from 'react';\nimport './Contacts.scss';\nimport { format } from 'date-fns';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getChats } from '../../api/chats';\nimport { loadChatsAction, loadMessagesAction, setSelectedChatIdAction } from '../../store/actions';\nimport { getChatsSelector, getMessagesSelector, getSearchSelector } from '../../store/selectors';\nimport { getMessages } from '../../api/message';\n\nexport const Contacts: React.FC = () => {\n  const dispatch = useDispatch();\n  const chats = useSelector(getChatsSelector);\n  const messages = useSelector(getMessagesSelector);\n  const search = useSelector(getSearchSelector);\n\n  useEffect(() => {\n    const loadDataFromServer = async () => {\n      const responseChats = await getChats();\n      const responseMessages = await getMessages();\n\n      dispatch(loadMessagesAction(responseMessages));\n      dispatch(loadChatsAction(responseChats));\n    };\n\n    loadDataFromServer();\n  }, []);\n\n  const selectChat = (chatId: number) => {\n    dispatch(setSelectedChatIdAction(chatId));\n  };\n\n  const getLastMessage = (id: number, type: string) => {\n    const filteredMessages = messages.filter((message) => {\n      return message.chatId === id;\n    });\n\n    const messagesLength = filteredMessages.length;\n\n    if (type === 'message') {\n      if (!filteredMessages.length) {\n        return 'Say hello';\n      }\n\n      return filteredMessages[messagesLength - 1].body || '';\n    }\n\n    if (!filteredMessages.length) {\n      return '';\n    }\n\n    const dateNow = new Date(filteredMessages[messagesLength - 1].date);\n\n    return format(dateNow, 'MMM d, yyyy');\n  };\n\n  const filteredChats = chats.filter((chat) => {\n    return chat.name.toLowerCase().includes(search.toLowerCase());\n  });\n\n  return (\n    <div className=\"chats\">\n      <p className=\"chats__title\">Chats</p>\n      {\n        filteredChats.map(chat => (\n          <div\n            key={chat.id}\n            className=\"chats__chat chat\"\n            role=\"button\"\n            aria-hidden=\"true\"\n            onClick={() => selectChat(chat.id)}\n          >\n            <img\n              src={chat.photo}\n              alt=\"avatar\"\n              className=\"chat__img\"\n            />\n            <div className=\"chat__info\">\n              <div className=\"chat__date-name\">\n                <p>{chat.name}</p>\n                <p className=\"chat__date\">{getLastMessage(chat.id, 'date')}</p>\n              </div>\n              <p className=\"chat__message\">{getLastMessage(chat.id, 'message')}</p>\n            </div>\n          </div>\n        ))\n      }\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './Search.scss';\nimport { useDispatch } from 'react-redux';\nimport { setSearchAction } from '../../store/actions';\n\nexport const Search: React.FC = () => {\n  const [currentInput, setCurrentInput] = useState('');\n  const dispatch = useDispatch();\n\n  const inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCurrentInput(event.target.value);\n    dispatch(setSearchAction(event.target.value));\n  };\n\n  return (\n    <div className=\"search\">\n      <img\n        src=\"./images/koala.jpg\"\n        alt=\"avatar\"\n        className=\"search__avatar\"\n      />\n      <input\n        type=\"text\"\n        className=\"search__input\"\n        placeholder=\"Search or start new chat\"\n        onChange={inputHandler}\n        value={currentInput}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Message } from '../../react-app-env.d';\n\ntype Props = {\n  message: Message,\n};\n\nexport const MessageFromMe: React.FC<Props> = ({ message }) => {\n  return (\n    <div className=\"message-from-me\">\n      <div className=\"message-from-me__info\">\n        <p className=\"message-from-me__text\">{message.body}</p>\n        <p className=\"message-from-me__date\">{`${message.date}, ${message.time}`}</p>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Message } from '../../react-app-env.d';\n\ntype Props = {\n  message: Message,\n  photo: string | undefined,\n};\n\nexport const MessageToMe: React.FC<Props> = ({ message, photo }) => {\n  return (\n    <div className=\"message-to-me\">\n      <div className=\"message-to-me__info\">\n        <img\n          src={photo}\n          alt=\"avatar\"\n          className=\"message-to-me__avatar\"\n        />\n        <p className=\"message-to-me__text\">{message.body}</p>\n      </div>\n      <p className=\"message-to-me__date\">{`${message.date}, ${message.time}`}</p>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport './Messages.scss';\nimport { format } from 'date-fns';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getChatsSelector, getMessagesSelector, getSelectedChatIdSelector } from '../../store/selectors';\nimport { MessageFromMe } from '../MessageFromMe/MessageFromMe';\nimport { MessageToMe } from '../MessageToMe/MessageToMe';\nimport { getMessageFromChuck } from '../../api/message';\nimport { loadMessagesAction } from '../../store/actions';\n\nexport const Messages: React.FC = () => {\n  const dispatch = useDispatch();\n  const chatId = useSelector(getSelectedChatIdSelector);\n  const chats = useSelector(getChatsSelector);\n  const messages = useSelector(getMessagesSelector);\n  const [currentInput, setCurrentInput] = useState('');\n  const refScroll = useRef<HTMLDivElement | null>(null);\n  const selectedChat = chats.find((chat) => {\n    return chat.id === chatId;\n  });\n  const filteredMessages = messages.filter((message) => {\n    return message.chatId === chatId;\n  });\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCurrentInput(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n  };\n\n  const addMessageHandler = async () => {\n    const newMessage = {\n      body: currentInput,\n      date: format(new Date(), 'M/d/yy'),\n      time: format(new Date(), 'h:mm aa'),\n      fullDate: +new Date(),\n      direction: 'from_me',\n      chatId,\n    };\n\n    // await addMessage(newMessage);\n    setCurrentInput('');\n    // const responseMessages = await getMessages();\n\n    dispatch(loadMessagesAction([newMessage]));\n\n    // eslint-disable-next-line no-console\n    console.log(messages);\n\n    setTimeout(async () => {\n      const response = await getMessageFromChuck();\n\n      const chuckMessage = {\n        body: response.value,\n        date: format(new Date(), 'M/d/yy'),\n        time: format(new Date(), 'h:mm aa'),\n        fullDate: +new Date(),\n        direction: 'to_me',\n        chatId,\n      };\n\n      // await addMessage(chuckMessage);\n      // const responseFromChuck = await getMessages();\n\n      dispatch(loadMessagesAction([chuckMessage]));\n    }, 10000);\n  };\n\n  useEffect(() => {\n    if (refScroll) {\n      refScroll.current?.scrollTo(0, refScroll.current?.scrollHeight);\n    }\n  });\n\n  return (\n    <div className=\"messages\">\n      <div className=\"messages__header\">\n        <img\n          src={selectedChat?.photo}\n          alt=\"avatar\"\n          className=\"messages__header-avatar\"\n        />\n        <p className=\"messages__header-name\">{selectedChat?.name}</p>\n      </div>\n      <div\n        className=\"messages__content\"\n        ref={refScroll}\n      >\n        {\n          filteredMessages.map((message => {\n            return (message.direction === 'from_me') ? (\n              <MessageFromMe message={message} />\n            ) : (\n              <MessageToMe message={message} photo={selectedChat?.photo} />\n            );\n          }))\n        }\n      </div>\n      <div className=\"messages__footer\">\n        <form onSubmit={handleSubmit} className=\"messages__footer-form\" action=\"\">\n          <input\n            className=\"messages__footer-input\"\n            type=\"text\"\n            placeholder=\"Type your message\"\n            value={currentInput}\n            onChange={handleInput}\n          />\n          <button\n            className=\"messages__footer-button\"\n            type=\"button\"\n            onClick={addMessageHandler}\n          >\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './reset.scss';\nimport './App.scss';\nimport { Contacts } from './components/Contacts/Contacts';\nimport { Search } from './components/Search/Search';\nimport { Messages } from './components/Messages/Messages';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <div className=\"app__sidebar\">\n        <Search />\n        <Contacts />\n      </div>\n      <Messages />\n    </div>\n  );\n};\n","import { createStore, AnyAction } from 'redux';\nimport { State } from '../react-app-env.d';\nimport {\n  LOAD_CHATS,\n  LOAD_MESSAGES,\n  SET_SEARCH,\n  SET_SELECTED_CHAT_ID,\n} from './actions';\n\nconst initialState: State = {\n  chats: [],\n  messages: [],\n  selectedChatId: 1,\n  search: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_CHATS:\n      return {\n        ...state,\n        chats: [...action.payload],\n      };\n    case SET_SELECTED_CHAT_ID:\n      return {\n        ...state,\n        selectedChatId: action.payload,\n      };\n    case LOAD_MESSAGES:\n      return {\n        ...state,\n        messages: [...state.messages, ...action.payload],\n      };\n    case SET_SEARCH:\n      return {\n        ...state,\n        search: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}